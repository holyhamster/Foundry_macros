const fireString = 'Fire';
const waterString = 'Water';
const airString = 'Air';
const earthString = 'Earth';
const manString = 'Man';
const beastString = 'Beast';
const guardianString = 'Guardian';
const guidanceString = 'Guidance';
const plantString = 'Plant';
const taskString = 'Task';

Math.clip = function (number, min, max) {
    return Math.max(min, Math.min(number, max));
}

//spirit attributes and skills
function getSpiritStats(spiritType) {

    switch (spiritType) {
        case airString:
            return {
                body: -2, agility: 3, reaction: 4, strength: -3, initiative: 4,
                assensing: true, astral_combat: true, exotic_range: true, perception: true, running: true, unarmed_combat: true
            };
        case earthString:
            return {
                body: 4, agility: -2, reaction: -1, strength: 4, logic: -1, initiative: -1,
                assensing: true, astral_combat: true, exotic_range: true, perception: true, unarmed_combat: true
            };
        case fireString:
            return {
                body: 1, agility: 2, reaction: 3, strength: -2, intuition: 1, initiative: 3,
                assensing: true, astral_combat: true, exotic_range: true, perception: true, unarmed_combat: true
            };
        case beastString:
            return {
                body: 2, agility: 1, strength: 2,
                assensing: true, astral_combat: true, perception: true, unarmed_combat: true
            };
        case manString:
            return {
                body: 1, reaction: 2, strength: -2, intuition: 1, initiative: 2,
                assensing: true, astral_combat: true, perception: true, spellcasting: true, unarmed_combat: true
            };
        case waterString:
            return {
                agility: 1, reaction: 2, initiative: 2,
                assensing: true, astral_combat: true, exotic_range: true, perception: true, unarmed_combat: true
            };
        case guardianString:
            return {
                body: 1, agility: 2, reaction: 3, strength: 2, 
                assensing: true, astral_combat: true, blades: true, clubs: true, counterspelling: true, exotic_range: true, perception: true, unarmed_combat: true
            };
        case guidanceString:
            return {
                body: 3, agility: -1, reaction: 2, strength: 1, initiative: 2,
                arcana: true, assensing: true, astral_combat: true, counterspelling: true, perception: true, unarmed_combat: true
            };
        case plantString:
            return {
                body: 2, agility: -1, strength: 1, logic: -1,
                assensing: true, astral_combat: true, counterspelling: true, exotic_range: true, perception: true, unarmed_combat: true
            };
        case taskString:
            return {
                reaction: 2, strength: 2, initiative: 2,
                artisan: true, assensing: true, astral_combat: true, perception: true, unarmed_combat: true
            };
        default:
            return { body: 0, agility: 0, reaction: 0, strength: 0, willpower: 0, logic: 0, intuition: 0, charisma: 0, initiative: 0 };
    }
}

//spirit powers
function getSpiritPowers(spiritType, force) {
    let getPowers = function (normalPowers, optionalPowers, spiritType, force) {
        let powers = [];
        for (let normalPower of normalPowers)
        powers.push(getPowerData(normalPower, spiritType, force));
    
        for (let optionalPower of optionalPowers)
        {
            let pwr = getPowerData(optionalPower, spiritType, force);
            pwr["name"] = pwr["name"] + " (Optional)";
            powers.push(pwr);
        }
        return powers;
    }

    switch (spiritType) {
        case fireString:
            return getPowers(
                ["accident", "astral_form", "confusion", "elemental_attack", "energy_aura", "engulf", "materialization", "sapience",],
                ["fear", "guard", "noxious_breath", "search"], spiritType, force);
        case airString:
            return getPowers(
                ["accident", "astral_form", "concealment", "confusion", "engulf", "materialization", "movement", "sapience", "search"], 
                ["elemental_attack", "energy_aura", "fear", "guard", "noxious_breath", "psychokinesis"], spiritType, force);
        case earthString:
            return getPowers(
                ["astral_form", "binding", "guard", "materialization", "movement", "sapience", "search"],
                ["concealment", "confusion", "engulf", "elemental_attack", "fear"], spiritType, force);
        case beastString:
            return getPowers(
                ["animal_control", "astral_form", "enhanced_senses", "fear", "materialization", "movement", "sapience"],
                ["concealment", "confusion", "guard", "natural_weapon", "noxious_breath", "search", "venom"], spiritType, force);
        case manString:
            return getPowers(
                ["accident", "astral_form", "concealment", "confusion", "enhanced_senses", "guard", "influence", "materialization", "sapience", "search"],
                ["fear", "innate_spell", "movement", "psychokinesis"], spiritType, force);
        case waterString:
            return getPowers(
                ["astral_form", "concealment", "confusion", "engulf", "materialization", "movement", "sapience", "search"],
                ["accident", "binding", "elemental_attack", "energy_aura", "guard", "weather control"], spiritType, force);
        case guardianString:
            return getPowers(
                [],
                [], spiritType, force);
        case guidanceString:
            return getPowers(
                [],
                [], spiritType, force);
        case plantString:
            return getPowers(
                [],
                [], spiritType, force);
        case taskString:
            return getPowers(
                [],
                [], spiritType, force);
    }
}
function getPowerData(name, spiritType, force) {
    switch (name) {
        case "accident":
            return {
                name: "Accident", type: "adept_power",
                data: {
                    description: { source: "CRB394" },
                    action: {
                        type: "complex", attribute: "willpower", attribute2: "magic",
                        opposed: { type: "custom", attribute: "reaction", attribute2: "intuition" }
                    }
                }
            };
        case "animal_control":
            return {
                name: "Animal Control", type: "adept_power",
                data: {
                    description: { source: "CRB394" }
                }
            }
        case "astral_form":
            return {
                name: "Astral Form", type: "adept_power",
                data: {
                    description: { source: "CRB394" }
                }
            }
        case "binding":
                return {
                    name: "Binding", type: "adept_power",
                    data: {
                        description: { source: "CRB395" },
                    }
                }
        case "confusion":
            return {
                name: "Confusion", type: "adept_power",
                data: {
                    description: { source: "CRB395" },
                    action: {
                        type: "complex", attribute: "willpower", attribute2: "magic",
                        opposed: { type: "custom", attribute: "willpower", attribute2: "logic" }
                    }
                }
            }
        case "concealment":
            return {
                name: "Concealment", type: "adept_power",
                data: {
                    description: { source: "CRB395" }
                }
            }
        case "elemental_attack":
            return {
                name: "Elemental Attack", type: "adept_power",
                data: {
                    description: { source: "CRB396" },
                    action: {
                        type: "complex", skill: "exotic_range", attribute: "agility",
                        opposed: { type: "defense" },
                        limit: { attribute: "physical" },
                        damage: { type: "physical", base: force, attribute: "magic", ap: { base: force }, element: spiritType }
                    }
                }
            }
        case "energy_aura":
            return {
                name: "Energy Aura", type: "adept_power",
                data: {
                    description: { source: "CRB396" },
                    action: {
                        type: "complex", skill: "unarmed_combat", attribute: "agility",
                        opposed: { type: "defense" },
                        limit: { attribute: "physical" },
                        damage: { type: "physical", base: force, attribute: "strength", ap: { base: force } }
                    }
                }
            }
        case "engulf":
            return {
                name: "Engulf", type: "adept_power",
                data: {
                    description: { source: "CRB396" },
                    action: {
                        type: "complex", skill: "unarmed_combat", attribute: "agility",
                        opposed: { type: "defense" },
                        limit: { attribute: "physical" },
                        damage: { type: "physical", base: force, attribute: "magic", ap: { base: force } }
                    }
                }
            }
        case "enhanced_senses":
                return {
                    name: "Enhanced Senses(Hearing, Low-light, Smell)", type: "adept_power",
                    data: {
                        description: { source: "CRB396" },
                    }
                }
        case "fear":
            return {
                name: "Fear", type: "adept_power",
                data: {
                    description: { source: "CRB397" },
                    action: {
                        type: "complex", attribute: "willpower", attribute2: "magic",
                        opposed: { type: "custom", attribute: "willpower", attribute2: "logic" }
                    }
                }
            }
        case "guard":
            return {
                name: "Guard", type: "adept_power",
                data: {
                    description: { source: "CRB397" }
                }
            }
        case "materialization":
            return {
                name: "Materialization", type: "adept_power",
                data: {
                    description: { source: "CRB398" }
                }
            }
        case "movement":
            return {
                name: "Movement", type: "adept_power",
                data: {
                    description: { source: "CRB399" },
                    action: {
                        type: "complex", attribute: "willpower", attribute2: "magic"
                    }
                }
            };
        case "natural_weapon":
            return {
                name: "Natural Weapon", type: "adept_power",
                data: {
                    description: { source: "CRB399" }
                }
            }
        case "noxious_breath":
            return {
                name: "Noxious Breath", type: "adept_power",
                data: {
                    description: { source: "CRB399" },
                    action: {
                        type: "complex", skill: "exotic_range", attribute: "agility",
                        opposed: { type: "defense" },
                        limit: { attribute: "physical" }
                    }
                }
            }
        case "psychokinesis":
            return {
                name: "Psychokinesis", type: "adept_power",
                data: {
                    description: { source: "CRB400" },
                    action: {
                        type: "complex", attribute: "willpower", attribute2: "magic"
                    }
                }
            };
        case "influence":
            return {
                name: "Influence", type: "adept_power",
                data: {
                    description: { source: "CRB398" },
                    action: {
                        type: "complex", attribute: "magic", attribute2: "charisma",
                        opposed: { type: "custom", attribute: "willpower", attribute2: "logic" }
                    }
                }
            }
            case "innate_spell":
                return {
                    name: "Innate Spell", type: "adept_power",
                    data: {
                        description: { source: "CRB398" },
                        action: {
                            type: "complex", skill: "spellcasting", attribute: "magic"
                        }
                    }
                };
        case "sapience":
            return {
                name: "Sapience", type: "adept_power",
                data: {
                    description: { source: "CRB400" }
                }
            }
        case "search":
            return {
                name: "Search", type: "adept_power",
                data: {
                    description: { source: "CRB400" },
                    action: {
                        type: "complex", attribute: "intuition", attribute2: "magic", extended: true
                    }
                }
            }
        case "venom":
                return {
                    name: "Venom", type: "adept_power",
                    data: {
                        description: { source: "CRB401" }
                    }
                }
        case "weather_control":
            return {
                name: "Weather Control", type: "adept_power",
                data: {
                    description: { source: "CRB401" },
                    action: {
                        type: "complex", attribute: "willpower", attribute2: "magic", extended: true
                    }
                }
            }
        default:
            return { name: "Undefined", type: "adept_power" };
    }
}
async function drainRoll(actor, spirit, force)
{
    game.shadowrun5e.DiceSR.d6({
        actor: spirit,
        event: {shiftKey: true, altKey:true},
        count: force,
        dialogOptions: {prompt:true},
        wounds: false,
        title: "Summoning Resistance"});
    
    //actor.rollDrain({event: {shiftKey: true, altKey:true}});
    //TODO: add drain roll if actor != null
}

function getOptionalPower(name)
{
    let power = getPower(name);
    power["name"] = power["name"] + " (Optional)";
    return power;
}

//main body
async function macroAsync() {

    const summon = async function (html) {

        let force = parseInt(html.find('[id="force"]').val());
        Math.clip(force, 1, 50);
        const spiritType = html.find('[id="spiritType"]').val();
        let attributes = getSpiritStats(spiritType);

        let spiritActor = await Actor.create({
            type: "character",
            name: spiritType + ' Force ' + force,
            data: {
                special: "magic",
                attributes: {
                    body: { base: Math.clip("body" in attributes? attributes["body"] + force: force, 1, 99) },
                    agility: { base: Math.clip("agility" in attributes? attributes["agility"] + force: force, 1, 99) },
                    reaction: { base: Math.clip("reaction" in attributes? attributes["reaction"] + force: force, 1, 99) },
                    strength: { base: Math.clip("strength" in attributes? attributes["strength"] + force: force, 1, 99) },
                    willpower: { base: Math.clip("willpower" in attributes? attributes["willpower"] + force: force, 1, 99) },
                    logic: { base: Math.clip("logic" in attributes? attributes["logic"] + force: force, 1, 99) },
                    intuition: { base: Math.clip("intuition" in attributes? attributes["intuition"] + force: force, 1, 99) },
                    charisma: { base: Math.clip("charisma" in attributes? attributes["charisma"] + force: force, 1, 99) },
                    edge: { base: Math.floor(force / 2) },
                    magic: { base: force }
                },
                skills: {
                    active: {
                        assensing: { base: "assensing" in attributes ? force : 0 },
                        arcana: { base: "arcana" in attributes ? force : 0 },
                        artisan: { base: "artisan" in attributes ? force : 0 },
                        astral_combat: { base: "astral_combat" in attributes ? force : 0 },
                        blades: { base: "blades" in attributes ? force : 0 },
                        clubs: { base: "clubs" in attributes ? force : 0 },
                        counterspelling: { base: "counterspelling" in attributes ? force : 0 },
                        exotic_range: { base: "exotic_range" in attributes ? force : 0 },
                        perception: { base: "perception" in attributes ? force : 0 },
                        running: { base: "running" in attributes ? force : 0 },
                        spellcasting: { base: "spellcasting" in attributes ? force : 0 },
                        unarmed_combat: { base: "unarmed_combat" in attributes ? force : 0 }
                    }
                },
                modifiers: {
                    initiative: "initiative" in attributes? attributes["initiative"] : 0,
                    initiative_dice: 1
                }
            }

        })

        for (let powerData of getSpiritPowers(spiritType, force))
            spiritActor.createOwnedItem(powerData);
        spiritActor.data["img"] = "Content/Tokens/Monster/" + spiritType + "_spirit.png";
        spiritActor.data.token["img"] = spiritActor.data["img"];

        spiritActor.data.permission[Gamepad.userID] = 3;
        
        canvas.tokens.dropActor(spiritActor,  {
            x: canvas.tokens.controlled[0].actor.token.data.x,
            y: canvas.tokens.controlled[0].actor.token.data.y + 100
          });

        let summoningActor;
        //if (game.user.character)
        //{
            //summoningActor = game.user.character.actor;
        //}
        //else (canvas.tokens.controlled.length > 0)
        //{
            //summoningActor = canvas.tokens.controlled[0].actor;
        //}
        //if (summoningActor != null)
        drainRoll(summoningActor, spiritActor, force);
        
    };

    
    let d = new Dialog({
        title: "Summoning",
        content:`<form><div class="form-group"><label>Force</label><input id='force' value='1'></input></div><div class="form-group"><label>Number</label>
        <select name="spiritType" id='spiritType'>
        <option value =${waterString}>${waterString}</option>
        <option value =${earthString}>${earthString}</option>
        <option value =${airString}>${airString}</option>
        <option value =${fireString}>${fireString}</option>
        <option value =${beastString}>${beastString}</option>
        <option value =${manString}>${manString}</option>
        <option value =${guardianString}>${guardianString}</option>
        <option value =${guidanceString}>${guidanceString}</option>
        <option value =${plantString}>${plantString}</option>
        <option value =${taskString}>${taskString}</option>
        </select></div></form>`,
            buttons: {
        one: {
            label: "Ok",
            callback: html => summon(html)
        },
        two: {
            label: "Cancel",
            callback: html => console.log("SKILL-MACRO: Cancelled")
        }
    },
        close: html => console.log()
  });

d.render(true);
}

macroAsync();
